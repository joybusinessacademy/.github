name: release

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        description: The target OS, defaults to ubuntu-22.04
        default: ubuntu-22.04
        required: false
      project-path:
        type: string
        description: The project path, defaults to repository root `.`
        default: '.'
        required: false
      dotnet-version:
        type: string
        description: The dotnet version to use ['3.1.x', '6.0.x'], defaults to 6.0.x
        default: 6.0.x
        required: false
    secrets:
      NUGET_SOURCE_URL:
        required: true
      NUGET_AUTH_TOKEN:
        required: true

jobs:
  release:
    name: Release package
    runs-on: ${{ inputs.runs-on }}
    permissions:
      packages: write
      contents: read

    env:
      VERSION: ${{ github.event.release.tag_name }}
      NUGET_SOURCE_NAME: JBA_Shared_Packages

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.VERSION }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          source-url: ${{ secrets.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Project Version
        working-directory: ${{ inputs.project-path }}
        shell: pwsh
        run: |
          Clear-Host

          Write-Host "Updating project version"

          $projPath = Get-Item -Path ${{ inputs.project-path }} -Filter *.csproj
          $filePath = $projPath.FullName

          [ValidateNotNull]
          [ValidatePattern("^v?[1-9]+\.\d+\.\d+(\.\d+)?$")]
          $version = $Env:VERSION

          if ($version.Substring(0,1) -eq "v") {
            $version = $version.Substring(1)
          }

          $xml = New-Object XML
          $xml.Load($filePath)

          $versionNode = $xml.Project.PropertyGroup.Version
          if ($null -eq $versionNode) {
            $versionNode = $xml.CreateElement("Version")
            $xml.Project.PropertyGroup.AppendChild($versionNode)
          }

          $xml.Project.PropertyGroup.Version = $version
          $xml.Save($filePath)

          Write-Host "Updated project " + $filePath + " version to " + $version

      - name: Build
        shell: bash
        working-directory: ${{ inputs.project-path }}
        run: |
          dotnet build -c Release

      - name: Pack
        shell: bash
        working-directory: ${{ inputs.project-path }}
        run: |
          dotnet pack -c Release

      - name: Publish
        shell: bash"
        working-directory: ${{ inputs.project-path }}
        run: |
          dotnet nuget push bin/Release/*.nupkg --source ${{ env.NUGET_SOURCE_NAME }}